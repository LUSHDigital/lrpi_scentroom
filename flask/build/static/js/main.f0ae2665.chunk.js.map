{"version":3,"sources":["serviceWorker.js","FileUploader.js","index.js"],"names":["Boolean","window","location","hostname","match","FileUploader","props","fileChangeHandler","event","val","target","files","setState","selectedFile","colorChangeHandler","value","selectedCol","handleSubmit","preventDefault","data","FormData","append","state","uploadFile","uploadCol","bind","className","onSubmit","this","type","id","name","accept","onChange","url","origin","fetch","method","body","catch","error","console","log","React","Component","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCyDSC,E,YAtEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAWVC,kBAAoB,SAACC,GACjB,IAAIC,EAAMD,EAAME,OAAOC,MAAM,GAC7B,EAAKC,SAAS,CAACC,aAAcJ,KAdd,EAiBnBK,mBAAqB,SAACN,GAClB,IAAIC,EAAMD,EAAME,OAAOK,MACvB,EAAKH,SAAS,CAACI,YAAaP,KAnBb,EAsBnBQ,aAAe,SAACT,GACZA,EAAMU,iBACN,IAAMC,EAAO,IAAIC,SACjBD,EAAKE,OAAO,OAAQ,EAAKC,MAAMT,cAC/BM,EAAKE,OAAO,SAAU,EAAKC,MAAMN,aACjC,EAAKO,WAAWJ,GAChB,EAAKK,UAAUL,IAzBf,EAAKG,MAAQ,CACTT,aAAc,KACdG,YAAa,WAEjB,EAAKT,kBAAoB,EAAKA,kBAAkBkB,KAAvB,gBACzB,EAAKR,aAAe,EAAKA,aAAaQ,KAAlB,gBACpB,EAAKX,mBAAqB,EAAKA,mBAAmBW,KAAxB,gBATX,E,sEAgCf,OACI,yBAAKC,UAAU,aACX,0BAAMC,SAAUC,KAAKX,cACjB,oDAAgC,6BAChC,2BAAOY,KAAK,OAAOC,GAAG,YAAYC,KAAK,OAAOC,OAAO,aAAaC,SAAUL,KAAKrB,oBAAoB,6BACrG,gDAA4B,6BAAM,6BAClC,2BAAOsB,KAAK,QAAQE,KAAK,SAASE,SAAUL,KAAKd,mBAAoBC,MAAOa,KAAKN,MAAMN,cAJ3F,IAI0G,6BACtG,2BAAOa,KAAK,SAASd,MAAM,SAASe,GAAG,iB,iCAO5CX,GAEP,IAAMe,EAAMjC,OAAOC,SAASiC,OAAS,cACrCC,MAAMF,EAAK,CACPG,OAAQ,OACRC,KAAMnB,IAEToB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,gCAKtBxB,GACN,IAAMkB,EAAMjC,OAAOC,SAASiC,OAAS,aACrCC,MAAMF,EAAK,CACPG,OAAQ,OACRC,KAAMtB,IAETuB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,U,GAlETG,IAAMC,WCG3BC,E,iLAGA,OACE,6BACE,yBAAKnB,UAAY,iBACf,mDAED,kBAAC,EAAD,W,GAROiB,IAAMC,WAexBE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SF4G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f0ae2665.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './index.css';\n\nclass FileUploader extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedFile: null,\n            selectedCol: '#011993',\n        }\n        this.fileChangeHandler = this.fileChangeHandler.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.colorChangeHandler = this.colorChangeHandler.bind(this)\n    }\n\n    fileChangeHandler = (event) => {\n        let val = event.target.files[0];\n        this.setState({selectedFile: val});\n    }\n\n    colorChangeHandler = (event) => {\n        let val = event.target.value;\n        this.setState({selectedCol: val})\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const data = new FormData()\n        data.append('file', this.state.selectedFile)\n        data.append('colour', this.state.selectedCol)\n        this.uploadFile(data)\n        this.uploadCol(data)\n    }\n\n    render() {\n        return (\n            <div className=\"form_body\">\n                <form onSubmit={this.handleSubmit}> \n                    <label>Select Music File</label><br />\n                    <input type=\"file\" id=\"fileinput\" name=\"file\" accept=\".mp3,.mp4;\" onChange={this.fileChangeHandler}/><br />\n                    <label>Select Colour</label><br /><br />\n                    <input type=\"color\" name=\"colour\" onChange={this.colorChangeHandler} value={this.state.selectedCol}/> <br />\n                    <input type=\"submit\" value=\"Upload\" id=\"inputbtn\"/>  \n                </form>\n            </div>\n        )\n    }\n\n    //POST file input form data\n    uploadFile(data) {\n\n        const url = window.location.origin + '/uploadfile'\n        fetch(url, {\n            method: 'POST',\n            body: data,\n        })\n        .catch(error => console.log(error)\n        );\n    }\n\n    //POST col value form data\n    uploadCol(selectedCol) {\n        const url = window.location.origin + '/uploadcol';\n        fetch(url, {\n            method: 'POST',\n            body: selectedCol,\n        })\n        .catch(error => console.log(error)\n        );\n    }\n\n}\n\nexport default FileUploader;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport FileUploader from './FileUploader'\n\nclass App extends React.Component {\n   \n    render() {\n      return (\n        <div>\n          <div className = \"layout_header\">\n            <h1>ScentRoom Uploader</h1>\n          </div>\n          {<FileUploader />}\n        </div>\n      )\n    }\n  }\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}