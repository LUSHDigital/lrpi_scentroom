{"version":3,"sources":["serviceWorker.js","components/TestButton.js","notification.js","FileUploader.js","index.js"],"names":["Boolean","window","location","hostname","match","testStates","TEST_START","TEST_IN_PROGRESS","TEST_KILL","TestButton","props","state","runTest","sendCommand","c","url","endpoint","fetch","method","catch","error","console","log","setState","triggerTest","s","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","className","this","React","Component","Notification","openNotification","message","isActive","timer","setTimeout","PureComponent","API_URL","process","REACT_APP_STAGE","origin","FileUploader","notificationRef","createRef","fileChangeHandler","event","val","target","files","selectedFile","colorChangeHandler","value","selectedCol","handleSubmit","preventDefault","data","FormData","append","notificationManager","submitData","distanceHandlerActive","startTest","distanceHandlerDeactive","endPointRequest","then","res","e","a","headers","response","uploadFile","file_res","uploadCol","col_res","body","current","onSubmit","type","id","name","accept","onChange","onClick","ref","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36141495.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './TestButton.css';\nimport '../index.css';\n\nconst testStates = {\n    TEST_START : 0,\n    TEST_IN_PROGRESS : 1,\n    TEST_KILL : 2\n}\n\nclass TestButton extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n    }\n\n    state = {\n        runTest: false\n    }\n\n    sendCommand = (c) => {\n        if (c === testStates.TEST_START) {\n            const url = this.props.endpoint + '/test-start';\n            fetch(url, {\n                method: 'GET'\n            })\n            .catch(error => console.log(error)\n            );\n            this.setState({\n                runTest: true\n            });\n        } else if (c === testStates.TEST_KILL) {\n            const url = this.props.endpoint + '/test-kill';\n            fetch(url, {\n                method: 'GET'\n            })\n            .catch(error => console.log(error)\n            );  \n            this.setState({\n                runTest: false\n            }); \n        }\n    }\n\n    triggerTest = (s) => {\n        if (s === testStates.TEST_START) {\n            console.log('Test running!'); \n            this.sendCommand(s); \n        } else if (s === testStates.TEST_KILL) {\n            console.log('End of test...');\n            this.sendCommand(s); \n        }\n    }\n\n    render() {\n        return (\n            <>\n                <button \n                    onTouchStart={() => this.triggerTest(testStates.TEST_START)}\n                    onTouchEnd={() => this.triggerTest(testStates.TEST_KILL)}\n                    onMouseDown={() => this.triggerTest(testStates.TEST_START)}\n                    onMouseUp={() => this.triggerTest(testStates.TEST_KILL)}\n                    className=\"inputbtn\">\n                    { !this.state.runTest ? (\n                        <span>Press + hold to test</span>\n                    ) : (\n                        <span>Release to end</span>\n                    )}\n                    \n                </button>\n            </>\n        )\n    }\n\n}\n\nexport default TestButton;","import React, { PureComponent } from 'react';\nimport './notification.css';\n\n\nexport class Notification extends PureComponent {\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timer: null,\n      isActive: false,\n      message: '',\n    }\n  }\n\n  //Takes message param and sets notification state to active for 8s. Then resets state.\n  openNotification = (message) => {\n    this.setState({ \n      isActive: true,\n      message: message\n    })\n    this.timer = window.setTimeout(() => {\n      this.setState({\n        isActive: false,\n        message: ''\n      });\n    }, 10000);\n  }\n  \n  render() {\n    if(this.state.isActive) {\n      return (\n        <div className=\"notification\">\n          <div className=\"notification-body\" >\n            {this.state.message}\n          </div>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n}","import React from 'react';\nimport TestButton from './components/TestButton';\nimport './index.css';\nimport { Notification } from './notification';\n\nlet API_URL = process.env.REACT_APP_STAGE === 'dev' ? \"http://192.168.0.56:5000\" : window.location.origin;\n\nclass FileUploader extends React.Component {\n\n    //Ref for notification component\n    notificationRef = React.createRef()\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedFile: null,\n            selectedCol: '#011993',\n        }\n    }\n\n    fileChangeHandler = (event) => {\n        let val = event.target.files[0];\n        this.setState({selectedFile: val});\n    }\n\n    colorChangeHandler = (event) => {\n        let val = event.target.value;\n        this.setState({selectedCol: val})\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const data = new FormData()\n        data.append('file', this.state.selectedFile)\n        data.append('colour', this.state.selectedCol)\n        this.notificationManager(\"Loading.. await response\")\n        this.submitData(data)\n    }\n\n    distanceHandlerActive = () => {\n        //Run temp test for distance sensor active\n        this.notificationManager(\"Test request activated\")\n        this.startTest(true)\n    }\n\n    distanceHandlerDeactive = () => {\n        //Run temp test for distance sensor deactive\n        this.notificationManager(\"Test request deactivated\")\n        this.startTest(false)\n    }\n\n    //Manage end point requests responses\n    startTest = (data) => {\n        this.endPointRequest(data).then((res) => {\n            if(res === 200) {\n                this.notificationManager(\"Test success\")\n            } else {\n                this.notificationManager(\"Test failed\")\n            }\n        }).catch(e => {\n            this.notificationManager(\"Error: Test failed \", e.message)\n        });\n    }\n\n    //End point requests for dummy distance sensor\n    endPointRequest = async (state) => {\n        var url = ''\n        if(state){\n            url = 'http://192.168.0.56:5000/start-test'\n        } else {\n            url = 'http://192.168.0.56:5000/test-kill'\n        } \n        if(url !== '') {\n            let response = await fetch(url, {\n                headers: {'Content-Type': 'application/json'}\n            })\n            return await response.response\n        }\n        return null\n    }\n    \n    //Manage request response handlers\n    submitData = (data) => {\n        this.uploadFile(data).then((file_res) => {\n            this.uploadCol(data).then((col_res) => {\n                if(file_res === 200 && col_res === 200) {\n                    this.notificationManager(\"Upload success\")\n                } else if (file_res === 200 && col_res !== 200) {\n                    this.notificationManager(\"Error: Colour upload failed\")\n                } else if (file_res !== 200 && col_res === 200) {\n                    this.notificationManager(\"Error: File upload failed\")\n                } else {\n                    this.notificationManager(\"Error: Upload failed\")\n                }\n            }).catch(e => {\n                this.notificationManager(\"Error: Colour upload failed \", e.message)\n            });\n        }).catch(e => {\n            this.notificationManager(\"Error: File upload failed \", e.message)\n        });\n    }\n\n    //POST: uploads audio file to server\n    uploadFile = async (data) => {\n        //const url = API_URL + '/upload-file'\n        let url = 'http://192.168.0.56:5000/uploadfile'\n        let response = await fetch(url, {\n            method: 'POST',\n            body: data,\n        })\n        return await response.response\n    }\n\n    //POST: uploads col to server\n    uploadCol = async (selectedCol) => {\n        //const url = API_URL + '/upload-colour';\n        let url = 'http://192.168.0.56:5000/uploadcol';\n        let response = await fetch(url, {\n            method: 'POST',\n            body: selectedCol,\n        })\n        return await response.response\n    }\n\n    //Inits timed notification component with message param\n    notificationManager(message){\n        this.notificationRef.current.openNotification(message)\n    }\n\n    render() {\n        return (\n            <div className=\"form_body\">\n                <form onSubmit={this.handleSubmit}> \n                    <label>Select Music File</label><br />\n                    <input type=\"file\" id=\"fileinput\" name=\"file\" accept=\".mp3,.mp4;\" onChange={this.fileChangeHandler}/><br />\n                    <label>Select Colour</label><br /><br />\n                    <input type=\"color\" name=\"colour\" onChange={this.colorChangeHandler} value={this.state.selectedCol}/> <br />\n                    <input type=\"submit\" value=\"Upload\" className=\"inputbtn\"/>  \n                </form>\n                <div className=\"test-button\">\n                    <TestButton \n                        endpoint={API_URL}\n                    />\n                </div>\n                <br />\n                <button className=\"tempSensorBtn\" onClick={this.distanceHandlerActive} > Activate test</button>\n                <button className=\"tempSensorBtn\" onClick={this.distanceHandlerDeactive} > Deactivate test</button>\n                <br />\n                <Notification ref = {this.notificationRef} />\n            </div>\n        )\n    }\n}\n\nexport default FileUploader;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport FileUploader from './FileUploader'\n\nclass App extends React.Component {\n   \n    render() {\n      return (\n        <div>\n          <div className = \"layout_header\">\n            <h1>ScentRoom Uploader</h1>\n          </div>\n          {<FileUploader />}\n        </div>\n      )\n    }\n  }\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}