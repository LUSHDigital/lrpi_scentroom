{"version":3,"sources":["serviceWorker.js","notification.js","FileUploader.js","index.js"],"names":["Boolean","window","location","hostname","match","Notification","props","openNotification","message","setState","isActive","timer","setTimeout","state","this","className","PureComponent","FileUploader","notificationRef","React","createRef","fileChangeHandler","event","val","target","files","selectedFile","colorChangeHandler","value","selectedCol","handleSubmit","preventDefault","data","FormData","append","fileresponse","uploadFile","colresponse","uploadCol","notificationManager","bind","distanceHandlerActive","distanceHandlerDeactive","endpointRequest","onSubmit","type","id","name","accept","onChange","onClick","ref","url","origin","response","fetch","method","body","JSON","stringify","catch","error","console","log","current","Component","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84072389.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { PureComponent } from 'react';\nimport './notification.css';\n\n\nexport class Notification extends PureComponent {\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timer: null,\n      isActive: false,\n      message: '',\n    }\n  }\n\n  //Takes message param and sets notification state to active for 8s. Then resets state.\n  openNotification = (message) => {\n    this.setState({ \n      isActive: true,\n      message: message\n    })\n    this.timer = window.setTimeout(() => {\n      this.setState({\n        isActive: false,\n        message: ''\n      });\n    }, 8000);\n  }  \n\n  render() {\n    if(this.state.isActive) {\n      return (\n        <div className=\"notification\">\n          <div className=\"notification-body\" >\n            {this.state.message}\n          </div>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n}","import React from 'react';\nimport './index.css';\nimport { Notification } from './notification';\n\nclass FileUploader extends React.Component {\n\n    //Ref for notification component\n    notificationRef = React.createRef()\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedFile: null,\n            selectedCol: '#011993',\n        }\n        this.fileChangeHandler = this.fileChangeHandler.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n        this.colorChangeHandler = this.colorChangeHandler.bind(this)\n        this.distanceHandlerActive = this.distanceHandlerActive.bind(this)\n        this.distanceHandlerDeactive = this.distanceHandlerDeactive.bind(this)\n    }\n\n    fileChangeHandler = (event) => {\n        let val = event.target.files[0];\n        this.setState({selectedFile: val});\n    }\n\n    colorChangeHandler = (event) => {\n        let val = event.target.value;\n        this.setState({selectedCol: val})\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const data = new FormData()\n        data.append('file', this.state.selectedFile)\n        data.append('colour', this.state.selectedCol)\n        \n        //Upload methods return boolean success/fail\n        let fileresponse = this.uploadFile(data)\n        let colresponse = this.uploadCol(data)\n\n        //Calls notification component manager\n        if(fileresponse && colresponse) {\n            this.notificationManager(\"Success: Audio and Colour Uploaded\")\n        } else if (!fileresponse && colresponse) {\n            this.notificationManager(\"Error: Failed to upload audio file\")\n        } else if (fileresponse && !colresponse) {\n            this.notificationManager(\"Error: Failed to upload colour\")\n        } else if (!fileresponse && !colresponse) {\n            this.notificationManager(\"Error: Upload failed\")\n        }\n\n    }\n\n    distanceHandlerActive() {\n        //Run temp test for distance sensor active\n        if(this.endpointRequest(true)){\n            this.notificationManager(\"Success: Activated\")\n        } else {\n            this.notificationManager(\"Error: Could not activate\")\n        }\n    }\n\n    distanceHandlerDeactive() {\n        //Run temp test for distance sensor deactive\n        if(this.endpointRequest(false)){\n            this.notificationManager(\"Success: Deactivated\")\n        } else {\n            this.notificationManager(\"Error: Could not deactivate\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"form_body\">\n                <form onSubmit={this.handleSubmit}> \n                    <label>Select Music File</label><br />\n                    <input type=\"file\" id=\"fileinput\" name=\"file\" accept=\".mp3,.mp4;\" onChange={this.fileChangeHandler}/><br />\n                    <label>Select Colour</label><br /><br />\n                    <input type=\"color\" name=\"colour\" onChange={this.colorChangeHandler} value={this.state.selectedCol}/> <br />\n                    <input type=\"submit\" value=\"Upload\" className=\"inputbtn\"/>  \n                </form>\n                <br />\n                <button className=\"tempSensorBtn\" onClick={this.distanceHandlerActive} > ACTIVATE SENSOR</button>\n                <button className=\"tempSensorBtn\" onClick={this.distanceHandlerDeactive} > DEACTIVATE SENSOR</button>\n                <br />\n                <Notification ref = {this.notificationRef} />\n            </div>\n        )\n    }\n\n\n    //End point requests for dummy distance sensor\n    endpointRequest(state){\n        var url = ''\n        if(state){\n            url = window.location.origin + '/start-test'\n        } else {\n            url = window.location.origin + '/end-test'\n        } \n        if(url !== '')\n            var data = {\n                \"active\": state\n            }\n            const response = fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(data)\n            }).catch((error) => {\n                console.log(\"Sensor Response Error: \" + error)\n            });\n            if(response.response === 200)\n                return true\n            \n        console.log(\"Sensor Response Error: \" + response)\n        return false\n        \n    }\n    \n\n    //POST file input form data\n    uploadFile(data) {\n        let url = window.location.origin + '/uploadfile'\n        const response = fetch(url, {\n            method: 'POST',\n            body: data,\n        }).catch((error) => {\n            console.log(\"Upload File Error: \" + error)\n        });\n        \n        if(response.response === 200){\n            return true\n        } else {\n            console.log(\"Upload File Error: \" + response)\n            return false\n        }\n\n    }\n\n    //POST col value form data\n    uploadCol(selectedCol) {\n        let url = window.location.origin + '/uploadcol';\n        const response = fetch(url, {\n            method: 'POST',\n            body: selectedCol,\n        }).catch((error) => {\n            console.log(\"Upload File Error: \" + error)\n        });\n        \n        if(response.response === 200){\n            return true\n        } else {\n            console.log(\"Upload File Error: \" + response)\n            return false\n        }\n    }\n\n    //Inits timed notification component with message param\n    notificationManager(message){\n        this.notificationRef.current.openNotification(message)\n    }\n}\n\nexport default FileUploader;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport FileUploader from './FileUploader'\n\nclass App extends React.Component {\n   \n    render() {\n      return (\n        <div>\n          <div className = \"layout_header\">\n            <h1>ScentRoom Uploader</h1>\n          </div>\n          {<FileUploader />}\n        </div>\n      )\n    }\n  }\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}