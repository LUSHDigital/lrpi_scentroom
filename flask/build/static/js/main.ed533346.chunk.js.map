{"version":3,"sources":["serviceWorker.js","components/TestButton.js","notification.js","FileUploader.js","index.js"],"names":["Boolean","window","location","hostname","match","testStates","TEST_START","TEST_IN_PROGRESS","TEST_KILL","TestButton","state","runTest","sendCommand","c","props","notificationManager","current","openNotification","url","endpoint","fetch","method","then","catch","error","console","log","setState","triggerTest","s","onTouchStart","onTouchEnd","onMouseDown","onMouseUp","className","this","React","Component","Notification","message","isActive","timer","setTimeout","PureComponent","API_URL","process","REACT_APP_STAGE","origin","FileUploader","notificationRef","createRef","fileChangeHandler","event","val","target","files","selectedFile","colorChangeHandler","value","selectedCol","handleSubmit","preventDefault","data","FormData","append","fileresponse","uploadFile","colresponse","uploadCol","distanceHandlerActive","endpointRequest","success","e","distanceHandlerDeactive","a","headers","res","json","response","body","currentTrack","status","color","track_name","onSubmit","id","type","name","accept","onChange","onClick","ref","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed533346.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './TestButton.css';\nimport '../index.css';\n\nconst testStates = {\n    TEST_START : 0,\n    TEST_IN_PROGRESS : 1,\n    TEST_KILL : 2\n}\n\nclass TestButton extends React.Component {\n\n    state = {\n        runTest: false\n    }\n\n    sendCommand = (c) => {\n        if (c === testStates.TEST_START) {\n            this.props.notificationManager.current.openNotification(\"The test is warming up...\");\n            const url = this.props.endpoint + '/test-start';\n            fetch(url, {\n                method: 'GET'\n            }).then(() => {\n                this.props.notificationManager.current.openNotification(\"Test is running!\");   \n            })\n            .catch(error => console.log(error)\n            );\n            this.setState({\n                runTest: true\n            });\n        } else if (c === testStates.TEST_KILL) {\n            const url = this.props.endpoint + '/test-kill';\n            fetch(url, {\n                method: 'GET'\n            }).then(() => {\n                this.props.notificationManager.current.openNotification(\"Test cancelled\");     \n            })\n            .catch(error => console.log(error)\n            );  \n            this.setState({\n                runTest: false\n            }); \n        }\n    }\n\n    triggerTest = (s) => {\n        if (s === testStates.TEST_START) {\n            console.log('Test running!'); \n            this.sendCommand(s); \n        } else if (s === testStates.TEST_KILL) {\n            console.log('End of test...');\n            this.sendCommand(s); \n        }\n    }\n\n    render() {\n        return (\n            <>\n                <button \n                    onTouchStart={() => this.triggerTest(testStates.TEST_START)}\n                    onTouchEnd={() => this.triggerTest(testStates.TEST_KILL)}\n                    onMouseDown={() => this.triggerTest(testStates.TEST_START)}\n                    onMouseUp={() => this.triggerTest(testStates.TEST_KILL)}\n                    className=\"inputbtn\">\n                    { !this.state.runTest ? (\n                        <span>Press + hold to test</span>\n                    ) : (\n                        <span>Release to end</span>\n                    )}\n                    \n                </button>\n            </>\n        )\n    }\n\n}\n\nexport default TestButton;","import React, { PureComponent } from 'react';\nimport './notification.css';\n\n\nexport class Notification extends PureComponent {\n  \n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timer: null,\n      isActive: false,\n      message: '',\n    }\n  }\n\n  //Takes message param and sets notification state to active for 8s. Then resets state.\n  openNotification = (message) => {\n    this.setState({ \n      isActive: true,\n      message: message\n    })\n    this.timer = window.setTimeout(() => {\n      this.setState({\n        isActive: false,\n        message: ''\n      });\n    }, 6000);\n  }  \n\n  render() {\n    if(this.state.isActive) {\n      return (\n        <div className=\"notification\">\n          <div className=\"notification-body\" >\n            {this.state.message}\n          </div>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n}","import React from 'react';\nimport TestButton from './components/TestButton';\nimport './index.css';\nimport { Notification } from './notification';\n\nlet API_URL = process.env.REACT_APP_STAGE === 'dev' ? \"http://192.168.63.202:5000\" : window.location.origin;\n\nclass FileUploader extends React.Component {\n\n    //Ref for notification component\n    notificationRef = React.createRef()\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            selectedFile: null,\n            selectedCol: '#011993',\n            currentTrack: null,\n            hostname: \"Offline\"\n        }\n    }\n\n    fileChangeHandler = (event) => {\n        let val = event.target.files[0];\n        this.setState({selectedFile: val});\n    }\n\n    colorChangeHandler = (event) => {\n        let val = event.target.value;\n        this.setState({selectedCol: val})\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault()\n        const data = new FormData()\n        data.append('file', this.state.selectedFile)\n        data.append('colour', this.state.selectedCol)\n        \n        //Upload methods return boolean success/fail\n        let fileresponse = this.uploadFile(data)\n        let colresponse = this.uploadCol(data)\n\n        //Calls notification component manager\n        if(fileresponse && colresponse) {\n            console.log(\"Response from notification manager: \", fileresponse, colresponse)\n            this.notificationManager(\"Upload success\")\n        } else if (!fileresponse && !colresponse) {\n            console.log(\"Response from notification manager: \", fileresponse, colresponse)\n            this.notificationManager(\"Error: Failed to upload audio file\")\n        } else if (!fileresponse && colresponse) {\n            this.notificationManager(\"Error: Failed to upload colour\")\n        } else if (!fileresponse && !colresponse) {\n            this.notificationManager(\"Error: Upload failed\")\n        }\n    }\n\n    distanceHandlerActive = () => {\n        //Run temp test for distance sensor active\n        this.notificationManager(\"Warming up the room...\");\n        this.endpointRequest(true).then((success) => {\n            if (success){\n                this.notificationManager(\"Success: Activated\");\n            } else {\n                this.notificationManager(\"Error: Could not activate\");\n            }\n        }).catch((e) => {\n            console.log(\"Something went horribly wrong...\");\n        })\n        \n    }\n\n    distanceHandlerDeactive = () => {\n        //Run temp test for distance sensor deactive\n        this.notificationManager(\"Ending the test...\");\n        if (this.endpointRequest(false)){\n            this.notificationManager(\"Success: Deactivated\");\n        } else {\n            this.notificationManager(\"Error: Could not deactivate\");\n        }\n    }\n\n    //End point requests for dummy distance sensor\n    endpointRequest = async (state) => {\n        console.log('epr: ', state);\n        \n        \n        var url = '';\n        if(state){\n            url = API_URL + '/test-start';\n        } else {\n            url = API_URL + '/test-kill';\n        } \n\n        if(url !== '') {\n\n            const res = await fetch(url, {\n                headers: {'Content-Type': 'application/json'}\n            })\n\n            const response = await res.json();\n\n            console.log('json res: ', response)\n           \n            if(response != null && response.response === 200) {\n                return true;\n            } \n        }\n        return false;\n    }\n    \n\n    //POST file input form data\n    uploadFile = async (data) => {\n        const url = API_URL + '/upload-file';\n        const response = await fetch(url, {\n            method: 'POST',\n            body: data,\n        })\n        if(response != null && response.response === 200){\n            return true\n        }\n        return false\n    }\n\n\n    //POST col value form data\n    uploadCol = async (selectedCol) => {\n        const url = API_URL + '/upload-colour';\n        const response = await fetch(url, {\n            method: 'POST',\n            body: selectedCol,\n        })\n        if(response != null && response.response === 200){\n            return true\n        }\n        return false\n    }\n\n    //Inits timed notification component with message param\n    notificationManager(message){\n        this.notificationRef.current.openNotification(message)\n    }\n\n    // Get what's loaded onto the scentroom right now\n\n    async componentDidMount() {\n        const url = API_URL + '/status';\n        const res = await fetch(url, {\n            headers: {'Content-Type': 'application/json'}\n        })\n\n        const response = await res.json();\n\n        if (response.response === 200 && response.status === \"healthy\" && response.color) {\n            this.setState({\n                selectedCol: response.color,\n                currentTrack: response.track_name,\n                hostname: response.hostname\n            })\n        }\n\n        console.log('json res: ', response)\n\n    }\n\n    render() {\n        return (\n            <>\n                <div className = \"layout_header\">\n                    <h1>{this.state.hostname}</h1>\n                </div>\n                <div className=\"form_body\">\n                    <form onSubmit={this.handleSubmit}> \n                        {this.state.currentTrack ? (\n                            <>\n                                <h4>is loaded with:</h4>\n                                <h2 id=\"track-name\">{this.state.currentTrack}</h2>\n                            </>\n                        ) : (\n                            <h5>No track found on this scentroom</h5>\n                        )}\n                        <label>Upload a new mp3 from your device</label><br />\n                        <input type=\"file\" id=\"fileinput\" name=\"file\" accept=\".mp3\" onChange={this.fileChangeHandler}/>\n                        <label>Pick a color</label><br /><br />\n                        <input type=\"color\" name=\"colour\" onChange={this.colorChangeHandler} value={this.state.selectedCol}/> <br />\n                        <input type=\"submit\" value=\"Upload\" className=\"inputbtn\"/>  \n                    </form>\n                    <hr/>\n                    <div className=\"test-button\">\n                        <TestButton \n                            endpoint={API_URL}\n                            notificationManager={this.notificationRef}\n                        />\n                    </div>\n                    or...\n                    <br />\n                    <button className=\"tempSensorBtn\" onClick={this.distanceHandlerActive} > Start test</button>\n                    <button className=\"tempSensorBtn\" onClick={this.distanceHandlerDeactive} > End test</button>\n                    <br />\n                    <Notification ref = {this.notificationRef} />\n                </div>\n            </>\n        )\n    }\n}\n\nexport default FileUploader;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport FileUploader from './FileUploader'\n\nclass App extends React.Component {\n   \n    render() {\n      return (\n        <div>\n          {<FileUploader />}\n        </div>\n      )\n    }\n  }\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}